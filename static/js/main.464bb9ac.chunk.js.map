{"version":3,"sources":["constants/endpoints.js","api/index.js","constants/auth.js","utils/index.js","scenes/Main/index.js","serviceWorker.js","index.js"],"names":["BASE_URL","getTracks","header","playlist","offset","axios","request","method","url","headers","Authorization","params","authUrl","obj","client_id","response_type","redirect_uri","scope","Object","keys","map","k","concat","encodeURIComponent","join","authorize","window","location","href","auth","Main","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","extractChunk","token","_this$state","state","tracks","playlists","tempTracks","assign","Promise","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","resolve","reject","extracted","done","playlistId","response","wrap","_context","prev","next","id","offsetTracks","sent","data","items","c","length","setState","completed","t0","console","error","stop","_x","_x2","apply","arguments","extractTracks","_ref2","_callee2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context2","extractingTracks","undefined","Symbol","iterator","value","return","finish","_x3","extractPlaylists","_ref3","_callee3","tempPlaylists","_context3","limit","slice","extractingPlaylists","_x4","toCsv","temp","track","name","log","artist","artists","flattened","_","uniq","v","parseAsync","then","csv","exported","flattenedTracks","download","blob","Blob","type","FileSaver","saveAs","accessToken","search","hash","substring","parsed","JSON","parse","replace","key","decodeURIComponent","access_token","_this$state2","_this$state3","acc","forEach","react_default","createElement","className","reactstrap_es","disabled","onClick","index_es","icon","faSpotify","style","marginTop","Component","Boolean","hostname","match","ReactDOM","render","scenes_Main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4WAAaA,EAAW,8BCiBjB,SAASC,EAAUC,EAAQC,EAAUC,GAC1C,OAAOC,IAAMC,QAAQ,CACnBC,OAAQ,MACRC,IAAKR,EAAW,aAAeG,EAAW,UAC1CM,QAAS,CACPC,cAAe,UAAYR,GAE7BS,OAAQ,CACNP,OAAQA,KCJCQ,IANIC,EAMJD,EApBC,4CAcGC,EAPC,CAClBC,UATe,mCAUfC,cAAe,QACfC,aANI,wDAOJC,MANa,qDAUNC,OAAOC,KAAKN,GAChBO,IAAI,SAAAC,GAAC,SAAAC,OAAOC,mBAAmBF,GAA1B,KAAAC,OAAgCC,mBAAmBV,EAAIQ,OAC5DG,KAAK,MCFH,SAASC,IACdC,OAAOC,SAASC,KAAOC,YCgKVC,cArKb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAAJ,IACjBE,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAAY,GAAAO,KAAAH,KAAMH,KA+BRO,aAAe,SAACC,EAAOpC,GAAa,IAAAqC,EACJR,EAAKS,MAA3BC,EAD0BF,EAC1BE,OAAQC,EADkBH,EAClBG,UACZC,EAAa1B,OAAO2B,OAAO,GAAIH,GACnC,OAAO,IAAII,QAAJ,eAAAC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAAC,EAAAC,KAAY,SAAAC,EAAOC,EAASC,GAAhB,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACbP,EAAY,KACZC,GAAO,EAFM,cAIXC,EAAatD,EAAS4D,GAJXH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAMQ7D,EAAUsC,EAAOkB,EAAYzB,EAAKgC,cAN1C,OAMTN,EANSE,EAAAK,KAObV,EAAYG,EAASQ,KAAKC,MACrBvB,EAAWa,KAAab,EAAWa,GAAc,IACtDb,EAAWa,GAAcb,EAAWa,GAAYnC,OAAOiC,GACvDvB,EAAKgC,cAAgB,IACjBhC,EAAKoC,IAAMzB,EAAU0B,OAAS,GAA0B,MAArBd,EAAUc,SAC/Cb,GAAO,GACTxB,EAAKsC,SAAS,CACZ5B,OAAQE,EACR2B,UAAWf,IAfAI,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,SAkBba,QAAQC,MAARd,EAAAY,IAlBa,WAoBa,MAArBjB,EAAUc,OApBF,CAAAT,EAAAE,KAAA,gBAqBjB9B,EAAKgC,aAAe,EACpBX,IAtBiB,yBAAAO,EAAAe,SAAAvB,EAAA,kBAAZ,gBAAAwB,EAAAC,GAAA,OAAA9B,EAAA+B,MAAA5C,KAAA6C,YAAA,KAnCU/C,EA6DnBgD,cA7DmB,eAAAC,EAAA/D,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAAC,EAAAC,KA6DH,SAAA+B,EAAM3C,GAAN,IAAAI,EAAAwC,EAAAC,EAAAC,EAAAC,EAAAC,EAAApF,EAAA,OAAA8C,EAAAC,EAAAS,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACNnB,EAAcX,EAAKS,MAAnBE,UACRX,EAAKsC,SAAS,CACZmB,kBAAkB,IAHNN,GAAA,EAAAC,GAAA,EAAAC,OAAAK,EAAAF,EAAA3B,KAAA,EAAAyB,EAKO3C,EALPgD,OAAAC,YAAA,UAAAT,GAAAI,EAAAD,EAAAxB,QAAAN,KAAA,CAAAgC,EAAA1B,KAAA,gBAKL3D,EALKoF,EAAAM,MAAAL,EAAA1B,KAAA,GAMN9B,EAAKM,aAAaC,EAAOpC,GANnB,QAOZ6B,EAAKoC,IAPO,QAAAe,GAAA,EAAAK,EAAA1B,KAAA,gBAAA0B,EAAA1B,KAAA,iBAAA0B,EAAA3B,KAAA,GAAA2B,EAAAhB,GAAAgB,EAAA,SAAAJ,GAAA,EAAAC,EAAAG,EAAAhB,GAAA,QAAAgB,EAAA3B,KAAA,GAAA2B,EAAA3B,KAAA,GAAAsB,GAAA,MAAAG,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAN,EAAA3B,KAAA,IAAAuB,EAAA,CAAAI,EAAA1B,KAAA,eAAAuB,EAAA,eAAAG,EAAAO,OAAA,mBAAAP,EAAAO,OAAA,YASd/D,EAAKsC,SAAS,CACZmB,kBAAkB,IAVN,yBAAAD,EAAAb,SAAAO,EAAA,oCA7DG,gBAAAc,GAAA,OAAAf,EAAAH,MAAA5C,KAAA6C,YAAA,GAAA/C,EA2EnBiE,iBA3EmB,eAAAC,EAAAhF,OAAA8B,EAAA,EAAA9B,CAAA+B,EAAAC,EAAAC,KA2EA,SAAAgD,EAAM5D,GAAN,IAAAI,EAAAY,EAAA6C,EAAA1C,EAAA,OAAAT,EAAAC,EAAAS,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OACTnB,EAAcX,EAAKS,MAAnBE,UACJY,EAAY,KACZ6C,EAAgBzD,EAHH,cAAA0D,EAAAxC,KAAA,EAMb7B,EAAK5B,QAAU,GANFiG,EAAAvC,KAAA,EHpFQ5D,EG2FaqC,EH3FLnC,EG2FY4B,EAAK5B,OH1F7CC,IAAMC,QAAQ,CACnBC,OAAQ,MACRC,IAAKR,EAAW,eAChBS,QAAS,CACPC,cAAe,UAAYR,GAE7BS,OAAQ,CACN2F,MAAO,GACPlG,OAAQA,KG2EO,OAOTsD,EAPS2C,EAAApC,KAQbV,EAAYG,EAASQ,KAAKC,MAC1BiC,EAAgBA,EAAc9E,OAAOiC,GACrCvB,EAAKsC,SAAS,CACZ3B,UAAWyD,EAAcG,MAAM,EAAG,KAXvBF,EAAAvC,KAAA,iBAAAuC,EAAAxC,KAAA,GAAAwC,EAAA7B,GAAA6B,EAAA,SAcb5B,QAAQC,MAAR2B,EAAA7B,IAda,QAgBR,EAhBQ,QAiBjBxC,EAAKsC,SAAS,CACZkC,qBAAqB,IAEvBxE,EAAKgD,cAAczC,GApBF,yBAAA8D,EAAA1B,OHpFd,IAAsBzE,EAAQE,GGoFhB+F,EAAA,kBA3EA,gBAAAM,GAAA,OAAAP,EAAApB,MAAA5C,KAAA6C,YAAA,GAAA/C,EAkGnB0E,MAAQ,WAAM,IACJhE,EAAWV,EAAKS,MAAhBC,OAEJiE,EAAOzF,OAAOC,KAAKuB,GAAQtB,IAAI,SAAAjB,GACjC,OAAOuC,EAAOvC,GAAUiB,IAAI,SAAAwF,GAE1B,OADKA,EAAMA,OAAUA,EAAMA,MAAMC,MAAMpC,QAAQqC,IAAIF,GAC5C,CACLA,MAAOA,EAAMA,OAASA,EAAMA,MAAMC,KAClCE,OACEH,EAAMA,OACNA,EAAMA,MAAMI,SACZJ,EAAMA,MAAMI,QAAQ,IACpBJ,EAAMA,MAAMI,QAAQ,GAAGH,UAI3BI,EAAY,GAAG3F,OAAOwD,MAAM,GAAI6B,GACpCM,EAAYC,IAAEC,KAAKF,EAAW,SAAAG,GAAC,MAAI,CAACA,EAAER,MAAOQ,EAAEL,QAAQvF,SACvD6F,qBAAWJ,EAhBI,CAAC,QAAS,WAgBKK,KAAK,SAAAC,GACjC9C,QAAQqC,IAAIS,GACZvF,EAAKsC,SAAS,CACZkD,UAAU,EACVD,IAAKA,EACLE,gBAAiBR,OAzHJjF,EA8HnB0F,SAAW,WAAM,IACPH,EAAQvF,EAAKS,MAAb8E,IACJI,EAAO,IAAIC,KAAK,CAACL,GAAM,CAAEM,KAAM,2BACnCC,IAAUC,OAAOJ,EAAM,uBA/HvB3F,EAAKS,MAAQ,CACX+D,qBAAqB,EACrBf,kBAAkB,EAClB/C,OAAQ,GACRC,UAAW,GACX4B,WAAW,EACXiD,UAAU,GAEZxF,EAAK5B,OAAS,EACd4B,EAAKgC,aAAe,EACpBhC,EAAKoC,EAAI,EAZQpC,mFAgBjB,IAAIgG,ED1BD,WACL,IAAIC,EAASvG,OAAOC,SAASuG,MAAQxG,OAAOC,SAASuG,KAAKC,UAAU,GAChEC,EAAS,KASb,OARIH,EAAO5D,OAAS,IAClB+D,EAASC,KAAKC,MACZ,KAAOL,EAAOM,QAAQ,KAAM,OAAOA,QAAQ,KAAM,OAAS,KAC1D,SAASC,EAAK3C,GACZ,MAAe,KAAR2C,EAAa3C,EAAQ4C,mBAAmB5C,MAI9CuC,GAAUA,EAAOM,aCeJJ,GACdN,IACF9F,KAAKoC,SAAS,CACZkC,qBAAqB,IAEvBtE,KAAK+D,iBAAiB+B,iDAIL,IAAAW,EACazG,KAAKO,MAA7B8B,EADWoE,EACXpE,UAAWiD,EADAmB,EACAnB,SACfjD,IAAciD,GAChBtF,KAAKwE,yCAwGA,IAAAkC,EAQH1G,KAAKO,MANP+D,EAFKoC,EAELpC,oBACAf,EAHKmD,EAGLnD,iBACA9C,EAJKiG,EAILjG,UACAD,EALKkG,EAKLlG,OACA8E,EANKoB,EAMLpB,SACAC,EAPKmB,EAOLnB,gBAEEoB,EAAM,EAEV,OADA3H,OAAOC,KAAKuB,GAAQoG,QAAQ,SAAA3I,GAAQ,OAAK0I,GAAOnG,EAAOvC,GAAUkE,SAE/D0E,EAAA7F,EAAA8F,cAAA,OAAKC,UAAU,UACbF,EAAA7F,EAAA8F,cAACE,EAAA,EAAD,CACEC,SAAU3C,GAAuBf,EACjC2D,QAAS5B,EAAWtF,KAAKwF,SAAWjG,EACpCwH,UAAU,UAEVF,EAAA7F,EAAA8F,cAACK,EAAA,EAAD,CAAiBJ,UAAU,eAAeK,KAAMC,MAC/C/C,EACG,4BAA8B7D,EAAU0B,OAAS,IACjDoB,EACA,yBAA2BoD,EAAM,IACjCrB,EACA,WACA,UAENuB,EAAA7F,EAAA8F,cAAA,OAAKQ,MAAO,CAACC,UAAW,SAAUjC,EAAWC,EAAgBpD,OAAS,oBAAsB,cAhKjFqF,mBCCCC,QACW,cAA7BjI,OAAOC,SAASiI,UAEe,UAA7BlI,OAAOC,SAASiI,UAEhBlI,OAAOC,SAASiI,SAASC,MACvB,2DCXNC,IAASC,OAAOhB,EAAA7F,EAAA8F,cAACgB,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.464bb9ac.chunk.js","sourcesContent":["export const BASE_URL = \"https://api.spotify.com/v1/\";","import axios from \"axios\";\r\nimport { BASE_URL } from \"constants/endpoints\";\r\n\r\nexport function getPlaylists(header, offset) {\r\n  return axios.request({\r\n    method: \"get\",\r\n    url: BASE_URL + \"me/playlists\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + header\r\n    },\r\n    params: {\r\n      limit: 50,\r\n      offset: offset\r\n    }\r\n  });\r\n}\r\n\r\nexport function getTracks(header, playlist, offset) {\r\n  return axios.request({\r\n    method: \"get\",\r\n    url: BASE_URL + \"playlists/\" + playlist + \"/tracks\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + header\r\n    },\r\n    params: {\r\n      offset: offset\r\n    }\r\n  });\r\n}\r\n","const clientId = \"e774f35cd91c4fe68ab31fb58bd03e53\";\r\nconst authUrl = \"https://accounts.spotify.com/authorize/?\";\r\nconst redirectUri =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"http://localhost:3000\"\r\n    : \"https://naxulanth.github.io/spotify-playlist-exporter\";\r\nconst scopes = \"playlist-read-private playlist-read-collaborative\";\r\n\r\nconst queryParams = {\r\n  client_id: clientId,\r\n  response_type: \"token\",\r\n  redirect_uri: redirectUri,\r\n  scope: scopes\r\n};\r\n\r\nfunction serialize(obj) {\r\n  return Object.keys(obj)\r\n    .map(k => `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`)\r\n    .join(\"&\");\r\n}\r\n\r\nexport default authUrl + serialize(queryParams);\r\n","import auth from \"constants/auth\";\r\n\r\nexport function parse() {\r\n  let search = window.location.hash && window.location.hash.substring(1);\r\n  let parsed = null;\r\n  if (search.length > 0) {\r\n    parsed = JSON.parse(\r\n      '{\"' + search.replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}',\r\n      function(key, value) {\r\n        return key === \"\" ? value : decodeURIComponent(value);\r\n      }\r\n    );\r\n  }\r\n  return parsed && parsed.access_token;\r\n}\r\n\r\nexport function authorize() {\r\n  window.location.href = auth;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Row, Col, Button } from \"reactstrap\";\r\nimport FileSaver from \"file-saver\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { parseAsync } from \"json2csv\";\r\nimport _ from \"lodash\";\r\nimport { faSpotify } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { getPlaylists, getTracks } from \"api\";\r\nimport { parse, authorize } from \"utils\";\r\nimport \"./style.css\";\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      extractingPlaylists: false,\r\n      extractingTracks: false,\r\n      tracks: {},\r\n      playlists: [],\r\n      completed: false,\r\n      exported: false\r\n    };\r\n    this.offset = 0;\r\n    this.offsetTracks = 0;\r\n    this.c = 0;\r\n  }\r\n\r\n  componentDidMount() {\r\n    let accessToken = parse();\r\n    if (accessToken) {\r\n      this.setState({\r\n        extractingPlaylists: true\r\n      });\r\n      this.extractPlaylists(accessToken);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { completed, exported } = this.state;\r\n    if (completed && !exported) {\r\n      this.toCsv();\r\n    }\r\n  }\r\n\r\n  extractChunk = (token, playlist) => {\r\n    const { tracks, playlists } = this.state;\r\n    let tempTracks = Object.assign({}, tracks);\r\n    return new Promise(async (resolve, reject) => {\r\n      let extracted = null;\r\n      let done = false;\r\n      do {\r\n        let playlistId = playlist.id;\r\n        try {\r\n          let response = await getTracks(token, playlistId, this.offsetTracks);\r\n          extracted = response.data.items;\r\n          if (!tempTracks[playlistId]) tempTracks[playlistId] = [];\r\n          tempTracks[playlistId] = tempTracks[playlistId].concat(extracted);\r\n          this.offsetTracks += 100;\r\n          if (this.c === playlists.length - 1 && extracted.length !== 100)\r\n            done = true;\r\n          this.setState({\r\n            tracks: tempTracks,\r\n            completed: done\r\n          });\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      } while (extracted.length === 100);\r\n      this.offsetTracks = 0;\r\n      resolve();\r\n    });\r\n  };\r\n\r\n  extractTracks = async token => {\r\n    const { playlists } = this.state;\r\n    this.setState({\r\n      extractingTracks: true\r\n    });\r\n    for (let playlist of playlists) {\r\n      await this.extractChunk(token, playlist);\r\n      this.c++;\r\n    }\r\n    this.setState({\r\n      extractingTracks: false\r\n    });\r\n  };\r\n\r\n  extractPlaylists = async token => {\r\n    const { playlists } = this.state;\r\n    let extracted = null;\r\n    let tempPlaylists = playlists;\r\n    do {\r\n      try {\r\n        this.offset += 50;\r\n        let response = await getPlaylists(token, this.offset);\r\n        extracted = response.data.items;\r\n        tempPlaylists = tempPlaylists.concat(extracted);\r\n        this.setState({\r\n          playlists: tempPlaylists.slice(0, 2)\r\n        });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    } while (false);\r\n    this.setState({\r\n      extractingPlaylists: false\r\n    });\r\n    this.extractTracks(token);\r\n  };\r\n\r\n  toCsv = () => {\r\n    const { tracks } = this.state;\r\n    const fields = [\"track\", \"artist\"];\r\n    let temp = Object.keys(tracks).map(playlist => {\r\n      return tracks[playlist].map(track => {\r\n        if (!track.track || !track.track.name) console.log(track);\r\n        return {\r\n          track: track.track && track.track.name,\r\n          artist:\r\n            track.track &&\r\n            track.track.artists &&\r\n            track.track.artists[0] &&\r\n            track.track.artists[0].name\r\n        };\r\n      });\r\n    });\r\n    let flattened = [].concat.apply([], temp);\r\n    flattened = _.uniq(flattened, v => [v.track, v.artist].join());\r\n    parseAsync(flattened, fields).then(csv => {\r\n      console.log(csv);\r\n      this.setState({\r\n        exported: true,\r\n        csv: csv,\r\n        flattenedTracks: flattened\r\n      });\r\n    });\r\n  };\r\n\r\n  download = () => {\r\n    const { csv } = this.state;\r\n    let blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\r\n    FileSaver.saveAs(blob, \"spotify_export.csv\");\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      extractingPlaylists,\r\n      extractingTracks,\r\n      playlists,\r\n      tracks,\r\n      exported,\r\n      flattenedTracks\r\n    } = this.state;\r\n    let acc = 0;\r\n    Object.keys(tracks).forEach(playlist => (acc += tracks[playlist].length));\r\n    return (\r\n      <div className=\"center\">\r\n        <Button\r\n          disabled={extractingPlaylists || extractingTracks}\r\n          onClick={exported ? this.download : authorize}\r\n          className=\"button\"\r\n        >\r\n          <FontAwesomeIcon className=\"spotify-icon\" icon={faSpotify} />\r\n          {extractingPlaylists\r\n            ? \"Extracting playlists... (\" + playlists.length + \")\"\r\n            : extractingTracks\r\n            ? \"Extracting tracks... (\" + acc + \")\"\r\n            : exported\r\n            ? \"Download\"\r\n            : \"Export\"}\r\n        </Button>\r\n        <div style={{marginTop: \"10px\"}}>{exported ? flattenedTracks.length + \" tracks exported!\" : null}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from 'scenes/Main';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}